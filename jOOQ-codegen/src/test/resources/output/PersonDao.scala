/**
 * This class is generated by jOOQ
 */
package test_scala.tables.daos


import java.lang.Integer
import java.lang.String
import java.util.List

import javax.annotation.Generated

import org.jooq.Configuration
import org.jooq.impl.DAOImpl

import test_scala.tables.Person
import test_scala.tables.records.PersonRecord


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	),
	comments = "This class is generated by jOOQ"
)
class PersonDao(configuration : Configuration) extends DAOImpl[PersonRecord, test_scala.tables.pojos.Person, Integer](Person.PERSON, classOf[test_scala.tables.pojos.Person], configuration) {

	/**
	 * Create a new PersonDao without any configuration
	 */
	def this() = {
		this(null)
	}

	override protected def getId(o : test_scala.tables.pojos.Person) : Integer = {
		o.getId
	}

	/**
	 * Fetch records that have <code>ID IN (values)</code>
	 */
	def fetchById(values : Integer*) : List[test_scala.tables.pojos.Person] = {
		fetch(Person.PERSON.ID, values:_*)
	}

	/**
	 * Fetch a unique record that has <code>ID = value</code>
	 */
	def fetchOneById(value : Integer) : test_scala.tables.pojos.Person = {
		fetchOne(Person.PERSON.ID, value)
	}

	/**
	 * Fetch records that have <code>NAME IN (values)</code>
	 */
	def fetchByName(values : String*) : List[test_scala.tables.pojos.Person] = {
		fetch(Person.PERSON.NAME, values:_*)
	}
}
