/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import generated.Keys;
import generated.Public;
import generated.tables.records.BookStoreRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookStore extends TableImpl<BookStoreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.book_store</code>
     */
    public static final BookStore BOOK_STORE = new BookStore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookStoreRecord> getRecordType() {
        return BookStoreRecord.class;
    }

    /**
     * The column <code>public.book_store.name</code>.
     */
    public final TableField<BookStoreRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(400).nullable(false), this, "");

    private BookStore(Name alias, Table<BookStoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookStore(Name alias, Table<BookStoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.book_store</code> table reference
     */
    public BookStore(String alias) {
        this(DSL.name(alias), BOOK_STORE);
    }

    /**
     * Create an aliased <code>public.book_store</code> table reference
     */
    public BookStore(Name alias) {
        this(alias, BOOK_STORE);
    }

    /**
     * Create a <code>public.book_store</code> table reference
     */
    public BookStore() {
        this(DSL.name("book_store"), null);
    }

    public <O extends Record> BookStore(Table<O> child, ForeignKey<O, BookStoreRecord> key) {
        super(child, key, BOOK_STORE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<BookStoreRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.BOOK_STORE_NAME_KEY);
    }

    @Override
    public BookStore as(String alias) {
        return new BookStore(DSL.name(alias), this);
    }

    @Override
    public BookStore as(Name alias) {
        return new BookStore(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookStore rename(String name) {
        return new BookStore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookStore rename(Name name) {
        return new BookStore(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
