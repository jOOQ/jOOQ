/*
 * This file is generated by jOOQ.
 */
package org.jooq.meta.postgres.pg_catalog.tables;


import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.meta.postgres.pg_catalog.Keys;
import org.jooq.meta.postgres.pg_catalog.PgCatalog;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgDescription extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_description</code>
     */
    public static final PgDescription PG_DESCRIPTION = new PgDescription();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>pg_catalog.pg_description.objoid</code>.
     */
    public final TableField<Record, Long> OBJOID = createField(DSL.name("objoid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_description.classoid</code>.
     */
    public final TableField<Record, Long> CLASSOID = createField(DSL.name("classoid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_description.objsubid</code>.
     */
    public final TableField<Record, Integer> OBJSUBID = createField(DSL.name("objsubid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_description.description</code>.
     */
    public final TableField<Record, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    private PgDescription(Name alias, Table<Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgDescription(Name alias, Table<Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_description</code> table reference
     */
    public PgDescription(String alias) {
        this(DSL.name(alias), PG_DESCRIPTION);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_description</code> table reference
     */
    public PgDescription(Name alias) {
        this(alias, PG_DESCRIPTION);
    }

    /**
     * Create a <code>pg_catalog.pg_description</code> table reference
     */
    public PgDescription() {
        this(DSL.name("pg_description"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.PG_DESCRIPTION_O_C_O_INDEX;
    }

    @Override
    public PgDescription as(String alias) {
        return new PgDescription(DSL.name(alias), this);
    }

    @Override
    public PgDescription as(Name alias) {
        return new PgDescription(alias, this);
    }

    @Override
    public PgDescription as(Table<?> alias) {
        return new PgDescription(alias.getQualifiedName(), this);
    }
}
