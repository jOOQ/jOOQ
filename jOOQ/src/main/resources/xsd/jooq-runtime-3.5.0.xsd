<?xml version="1.0" encoding="UTF-8"?>
<schema
  xmlns="http://www.w3.org/2001/XMLSchema"
  xmlns:jooq-runtime="http://www.jooq.org/xsd/jooq-runtime-3.3.0.xsd"
  targetNamespace="http://www.jooq.org/xsd/jooq-runtime-3.3.0.xsd"
  elementFormDefault="qualified">

  <element name="settings" type="jooq-runtime:Settings"/>

  <complexType name="Settings">
    <all>
      <!-- Whether any schema name should be rendered at all.
           Use this for single-schema environments, or when all objects are made
           available using synonyms -->
      <element name="renderSchema" type="boolean" minOccurs="0" maxOccurs="1" default="true"/>

      <!-- Configure render mapping for runtime schema / table rewriting in
           generated SQL -->
      <element name="renderMapping" type="jooq-runtime:RenderMapping" minOccurs="0" maxOccurs="1"/>

      <!-- Whether rendered schema, table, column names, etc should be quoted
           in rendered SQL, or transformed in any other way.
           This is set to "QUOTED" by default for backwards-compatibility -->
      <element name="renderNameStyle" type="jooq-runtime:RenderNameStyle" minOccurs="0" maxOccurs="1" default="QUOTED"/>

      <!-- Whether SQL keywords should be rendered with upper or lower case -->
      <element name="renderKeywordStyle" type="jooq-runtime:RenderKeywordStyle" minOccurs="0" maxOccurs="1" default="LOWER"/>

      <!-- Whether rendered SQL should be pretty-printed -->
      <element name="renderFormatted" type="boolean" minOccurs="0" maxOccurs="1" default="false"/>

      <!-- Whether stored function calls should be wrapped in scalar subqueries.
           Oracle 11g (and potentially, other databases too) implements scalar subquery caching. With this flag
           set to true, users can automatically profit from this feature in all SQL statements. -->
      <element name="renderScalarSubqueriesForStoredFunctions" type="boolean" minOccurs="0" maxOccurs="1" default="false"/>

      <!-- Whether rendered bind values should be rendered as:
      
           - question marks
           - named parameters
           - named or inlined parameters
           - inlined parameters
           
           This value is overridden by statementType == STATIC_STATEMENT, in
           case of which, this defaults to INLINED
        -->
      <element name="paramType" type="jooq-runtime:ParamType" minOccurs="0" maxOccurs="1" default="INDEXED"/>
      
      <!-- The type of statement that is to be executed -->
      <element name="statementType" type="jooq-runtime:StatementType" minOccurs="0" maxOccurs="1" default="PREPARED_STATEMENT"/>

      <!-- When set to true, this will add jOOQ's default logging ExecuteListeners -->
      <element name="executeLogging" type="boolean" minOccurs="0" maxOccurs="1" default="true"/>

      <!-- Whether store() and delete() methods should be executed with optimistic locking -->
      <element name="executeWithOptimisticLocking" type="boolean" minOccurs="0" maxOccurs="1" default="false"/>
      
      <!-- Whether fetched records should be attached to the fetching configuration -->
      <element name="attachRecords" type="boolean" minOccurs="0" maxOccurs="1" default="true"/>
      
      <!-- Whether primary key values are deemed to be "updatable" in jOOQ
      
           Setting this to "true" will allow for updating primary key values through
           UpdatableRecord.store() and UpdatableRecord.update()
        -->
      <element name="updatablePrimaryKeys" type="boolean" minOccurs="0" maxOccurs="1" default="false"/>
      
      <!-- Whether reflection information should be cached in the configuration -->
      <element name="reflectionCaching" type="boolean" minOccurs="0" maxOccurs="1" default="true"/>
      
      <!-- Whether warnings should be fetched after each query execution -->
      <element name="fetchWarnings" type="boolean" minOccurs="0" maxOccurs="1" default="true"/>

      <!-- Whether queries should escape backslashes, not escape but set NO_BACKSLASH_ESCAPES or neither. Mostly useful for MySQL users. -->
      <element name="backslashEscapeHandling" type="jooq-runtime:BackslashEscapeHandlingType" minOccurs="0" maxOccurs="1" default="AUTO"/>
    </all>
  </complexType>

  <complexType name="RenderMapping">
    <all>
      <!-- The default schema as defined in org.jooq.Schema.getName()
           This schema will be omitted in rendered SQL -->
      <element name="defaultSchema" type="string" minOccurs="0" maxOccurs="1"/>

      <!-- The mapped schemata configuration -->
      <element name="schemata" type="jooq-runtime:MappedSchemata" minOccurs="0" maxOccurs="1"/>
    </all>
  </complexType>

  <complexType name="MappedSchemata">
    <sequence>
      <element name="schema" type="jooq-runtime:MappedSchema" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>

  <complexType name="MappedSchema">
    <all>
      <!-- The input schema as defined in org.jooq.Schema.getName() -->
      <element name="input" type="string" minOccurs="1" maxOccurs="1"/>

      <!-- The output schema as it will be rendered in SQL
           When this is omitted, you can still apply table mapping -->
      <element name="output" type="string" minOccurs="0" maxOccurs="1"/>

      <!-- Configure table mapping for runtime table rewriting in
           generated SQL -->
      <element name="tables" type="jooq-runtime:MappedTables" minOccurs="0" maxOccurs="1"/>
    </all>
  </complexType>

  <complexType name="MappedTables">
    <sequence>
      <element name="table" type="jooq-runtime:MappedTable" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>

  <complexType name="MappedTable">
    <all>
      <!-- The input schema as defined in org.jooq.Table.getName() -->
      <element name="input" type="string" minOccurs="1" maxOccurs="1"/>

      <!-- The output schema as it will be rendered in SQL -->
      <element name="output" type="string" minOccurs="1" maxOccurs="1"/>
    </all>
  </complexType>

  <simpleType name="ParamType">
    <restriction base="string">

      <!-- Execute statements with indexed parameters, the way JDBC expects them -->
      <enumeration value="INDEXED"/>

      <!-- Execute statements with named parameters -->
      <enumeration value="NAMED"/>
      
      <!-- Execute statements with named parameters, if a name is given, or inlined parameters otherwise -->
      <enumeration value="NAMED_OR_INLINED"/>

      <!-- Execute statements with inlined parameters -->
      <enumeration value="INLINED"/>
    </restriction>
  </simpleType>

  <simpleType name="StatementType">
    <restriction base="string">

      <!-- Execute statements with inlined bind values, avoiding JDBC's
           PreparedStatements -->
      <enumeration value="STATIC_STATEMENT"/>

      <!-- Execute statements with bind values, using JDBC's
           PreparedStatements -->
      <enumeration value="PREPARED_STATEMENT"/>
    </restriction>
  </simpleType>

  <simpleType name="RenderNameStyle">
    <restriction base="string">

      <!-- Render object names quoted, as defined in the database. Use this
           to stay on the safe side with case-sensitivity and special
           characters. For instance:
           Oracle    : "SYS"."ALL_TAB_COLS"
           MySQL     : `information_schema`.`TABLES`
           SQL Server: [INFORMATION_SCHEMA].[TABLES] -->
      <enumeration value="QUOTED"/>

      <!-- Render object names, as defined in the database. For instance:
           Oracle    : SYS.ALL_TAB_COLS
           MySQL     : information_schema.TABLES
           SQL Server: INFORMATION_SCHEMA.TABLES -->
      <enumeration value="AS_IS"/>

      <!-- Force rendering object names in lower case. For instance:
           Oracle    : sys.all_tab_cols
           MySQL     : information_schema.tables
           SQL Server: information_schema.tables -->
      <enumeration value="LOWER"/>

      <!-- Force rendering object names in upper case. For instance:
           Oracle    : SYS.ALL_TAB_COLS
           MySQL     : INFORMATION_SCHEMA.TABLES
           SQL Server: INFORMATION_SCHEMA.TABLES -->
      <enumeration value="UPPER"/>
    </restriction>
  </simpleType>

  <simpleType name="RenderKeywordStyle">
    <restriction base="string">

      <!-- Keywords are rendered in lower case. For instance:
           select .. from .. where .. -->
      <enumeration value="LOWER"/>

      <!-- Keywords are rendered in upper case. For instance:
           SELECT .. FROM .. WHERE .. -->
      <enumeration value="UPPER"/>
    </restriction>
  </simpleType>

  <simpleType name="BackslashEscapeHandlingType">
    <restriction base="string">
      <!-- Strings will not have their backslashes escaped. MySQL connections
           will however set NO_BACKSLASH_ESCAPES. This is the safest setting,
           but implies a small performance hit when creating MySQL connections. -->
      <enumeration value="AUTO"/>

      <!-- Strings will not have their backslashes escaped. You should
           only use this option if you are connecting to a MySQL database which
           is configured with NO_BACKSLASH_ESCAPES. Improper use of this option can
           lead to security issues. -->
      <enumeration value="DO_NOT_ESCAPE_BACKSLASHES"/>

      <!-- Strings will have their backslashes escaped. You should only
           use this option if you are connecting to a MySQL database which is not
           configured with NO_BACKSLASH_ESCAPES. Improper use of this option can
           lead to mangled data. -->
      <enumeration value="ESCAPE_BACKSLASHES"/>

    </restriction>
  </simpleType>
</schema>