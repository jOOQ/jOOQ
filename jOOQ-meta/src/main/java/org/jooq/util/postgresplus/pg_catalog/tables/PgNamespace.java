/**
 * This class is generated by jOOQ
 */
package org.jooq.util.postgresplus.pg_catalog.tables;


import org.jooq.util.postgresplus.pg_catalog.PgCatalog;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.8.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgNamespace extends TableImpl<Record> {

	private static final long serialVersionUID = 962288006;

	/**
	 * The reference instance of <code>pg_catalog.pg_namespace</code>
	 */
	public static final PgNamespace PG_NAMESPACE = new PgNamespace();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<Record> getRecordType() {
		return Record.class;
	}

	/**
	 * The column <code>pg_catalog.pg_namespace.nspname</code>.
	 */
	public final TableField<Record, String> NSPNAME = createField("nspname", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

	/**
	 * The column <code>pg_catalog.pg_namespace.nspowner</code>.
	 */
	public final TableField<Record, Long> NSPOWNER = createField("nspowner", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>pg_catalog.pg_namespace.nspparent</code>.
	 */
	public final TableField<Record, Long> NSPPARENT = createField("nspparent", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>pg_catalog.pg_namespace.nspobjecttype</code>.
	 */
	public final TableField<Record, Long> NSPOBJECTTYPE = createField("nspobjecttype", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>pg_catalog.pg_namespace.nspforeignserver</code>.
	 */
	public final TableField<Record, Long> NSPFOREIGNSERVER = createField("nspforeignserver", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>pg_catalog.pg_namespace.nspsecdef</code>.
	 */
	public final TableField<Record, Boolean> NSPSECDEF = createField("nspsecdef", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

	/**
	 * The column <code>pg_catalog.pg_namespace.nspremoteschema</code>.
	 */
	public final TableField<Record, String> NSPREMOTESCHEMA = createField("nspremoteschema", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>pg_catalog.pg_namespace.nspheadsrc</code>.
	 */
	public final TableField<Record, String> NSPHEADSRC = createField("nspheadsrc", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>pg_catalog.pg_namespace.nspbodysrc</code>.
	 */
	public final TableField<Record, String> NSPBODYSRC = createField("nspbodysrc", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>pg_catalog.pg_namespace.nspacl</code>.
	 */
	public final TableField<Record, String[]> NSPACL = createField("nspacl", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

	/**
	 * Create a <code>pg_catalog.pg_namespace</code> table reference
	 */
	public PgNamespace() {
		this("pg_namespace", null);
	}

	/**
	 * Create an aliased <code>pg_catalog.pg_namespace</code> table reference
	 */
	public PgNamespace(String alias) {
		this(alias, PG_NAMESPACE);
	}

	private PgNamespace(String alias, Table<Record> aliased) {
		this(alias, aliased, null);
	}

	private PgNamespace(String alias, Table<Record> aliased, Field<?>[] parameters) {
		super(alias, PgCatalog.PG_CATALOG, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PgNamespace as(String alias) {
		return new PgNamespace(alias, this);
	}

	/**
	 * Rename this table
	 */
	public PgNamespace rename(String name) {
		return new PgNamespace(name, null);
	}
}
