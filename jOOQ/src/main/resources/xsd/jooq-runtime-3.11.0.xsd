<?xml version="1.0" encoding="UTF-8"?>
<schema
  xmlns="http://www.w3.org/2001/XMLSchema"
  xmlns:jooq-runtime="http://www.jooq.org/xsd/jooq-runtime-3.11.0.xsd"
  xmlns:jxb="http://java.sun.com/xml/ns/jaxb"
  targetNamespace="http://www.jooq.org/xsd/jooq-runtime-3.11.0.xsd"
  elementFormDefault="qualified"
  jxb:version="2.1">

  <element name="settings" type="jooq-runtime:Settings"/>

  <complexType name="Settings">
    <annotation><appinfo><jxb:class><jxb:javadoc><![CDATA[Settings that influence the way jOOQ renders SQL code.]]></jxb:javadoc></jxb:class></appinfo></annotation>
    <all>
      <element name="renderCatalog" type="boolean" minOccurs="0" maxOccurs="1" default="true">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Whether any catalog name should be rendered at all.
<p>
Use this for single-catalog environments, or when all objects are made
available using synonyms]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="renderSchema" type="boolean" minOccurs="0" maxOccurs="1" default="true">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Whether any schema name should be rendered at all.
<p>
Setting this to false also implicitly sets "renderCatalog" to false.
<p>
Use this for single-schema environments, or when all objects are made
available using synonyms]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="renderMapping" type="jooq-runtime:RenderMapping" minOccurs="0" maxOccurs="1">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Configure render mapping for runtime schema / table rewriting in
generated SQL.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="renderNameStyle" type="jooq-runtime:RenderNameStyle" minOccurs="0" maxOccurs="1" default="QUOTED">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Whether rendered schema, table, column names, etc should be quoted
in rendered SQL, or transformed in any other way.
<p>
This is set to "QUOTED" by default for backwards-compatibility]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="renderKeywordStyle" type="jooq-runtime:RenderKeywordStyle" minOccurs="0" maxOccurs="1" default="AS_IS">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Whether SQL keywords should be rendered with upper or lower case.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="renderFormatted" type="boolean" minOccurs="0" maxOccurs="1" default="false">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Whether rendered SQL should be pretty-printed.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="renderFormatting" type="jooq-runtime:RenderFormatting" minOccurs="0" maxOccurs="1">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[All sorts of formatting flags / settings.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="renderScalarSubqueriesForStoredFunctions" type="boolean" minOccurs="0" maxOccurs="1" default="false">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Whether stored function calls should be wrapped in scalar subqueries.
<p>
Oracle 11g (and potentially, other databases too) implements scalar subquery caching. With this flag
set to true, users can automatically profit from this feature in all SQL statements.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="backslashEscaping" type="jooq-runtime:BackslashEscaping" minOccurs="0" maxOccurs="1" default="DEFAULT">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Whether string literals should be escaped with backslash.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="paramType" type="jooq-runtime:ParamType" minOccurs="0" maxOccurs="1" default="INDEXED">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Specify how bind variables are to be rendered.
<p>
Possibilities include:

- question marks
- named parameters
- named or inlined parameters
- inlined parameters

This value is overridden by statementType == STATIC_STATEMENT, in
case of which, this defaults to INLINED]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="paramCastMode" type="jooq-runtime:ParamCastMode" minOccurs="0" maxOccurs="1" default="DEFAULT">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Whether rendered bind values should be cast to their respective type.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="statementType" type="jooq-runtime:StatementType" minOccurs="0" maxOccurs="1" default="PREPARED_STATEMENT">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[The type of statement that is to be executed.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="executeLogging" type="boolean" minOccurs="0" maxOccurs="1" default="true">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[When set to true, this will add jOOQ's default logging ExecuteListeners.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="executeWithOptimisticLocking" type="boolean" minOccurs="0" maxOccurs="1" default="false">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Whether store() and delete() methods should be executed with optimistic locking.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="executeWithOptimisticLockingExcludeUnversioned" type="boolean" minOccurs="0" maxOccurs="1" default="false">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Whether store() and delete() methods should be executed with optimistic locking also on "unversioned" tables,
i.e. on tables that do not have a version and/or timestamp column.
<p>
This flag has no effect when "executeWithOptimisticLocking" is turned off.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="attachRecords" type="boolean" minOccurs="0" maxOccurs="1" default="true">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Whether fetched records should be attached to the fetching configuration.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="updatablePrimaryKeys" type="boolean" minOccurs="0" maxOccurs="1" default="false">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Whether primary key values are deemed to be "updatable" in jOOQ.
<p>
Setting this to "true" will allow for updating primary key values through
UpdatableRecord.store() and UpdatableRecord.update().]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="reflectionCaching" type="boolean" minOccurs="0" maxOccurs="1" default="true">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Whether reflection information should be cached in the configuration.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="cacheRecordMappers" type="boolean" minOccurs="0" maxOccurs="1" default="true">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Whether record mappers should be cached in the configuration.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="throwExceptions" type="jooq-runtime:ThrowExceptions" minOccurs="0" maxOccurs="1" default="THROW_ALL">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[A strategy defining how exceptions from the database / JDBC driver should be propagated]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="fetchWarnings" type="boolean" minOccurs="0" maxOccurs="1" default="true">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Whether warnings should be fetched after each query execution.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="fetchServerOutputSize" type="int" minOccurs="0" maxOccurs="1" default="0">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Whether server output should be fetched after each query execution.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="returnAllOnUpdatableRecord" type="boolean" minOccurs="0" maxOccurs="1" default="false">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Whether calls to store(), insert() and update() should return all columns, not just identity columns.
<p>
Do note that only few databases support this feature. It is supported only in case the INSERT's or UPDATE's
RETURNING clause is fully supported, also for non-IDENTITY columns.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="returnRecordToPojo" type="boolean" minOccurs="0" maxOccurs="1" default="true">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Whether calls to store(), insert(), update(), and delete() that are called on an UpdatableRecord
that is created from a POJO (e.g. in a DAO) should return all Record values to the POJO, including
IDENTITY values, and if <returnAllOnUpdatableRecord/> is active, also other values.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="mapMutablePojoStrategy" type="boolean" minOccurs="0" maxOccurs="1" default="false">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[It sets the precedence of mapping the POJO objects.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="mapJPAAnnotations" type="boolean" minOccurs="0" maxOccurs="1" default="true">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Whether JPA annotations should be considered by the DefaultRecordMapper.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="mapConstructorParameterNames" type="boolean" minOccurs="0" maxOccurs="1" default="false">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Whether constructor parameter names obtained via reflection in Java 8+ should be considered by the DefaultRecordMapper. This flag has no effect in Java 6 or 7.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="queryTimeout" type="int" minOccurs="0" maxOccurs="1" default="0">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[The default JDBC queryTimeout property that should be applied to all
jOOQ queries, for which no specific queryTimeout was specified.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="maxRows" type="int" minOccurs="0" maxOccurs="1" default="0">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[The default JDBC maxRows property that should be applied to all
jOOQ queries, for which no specific maxRows value was specified.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="fetchSize" type="int" minOccurs="0" maxOccurs="1" default="0">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[The default JDBC fetchSize property that should be applied to all
jOOQ queries, for which no specific fetchSize value was specified.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="debugInfoOnStackTrace" type="boolean" minOccurs="0" maxOccurs="1" default="true">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[[#5570] Whether exception stack traces should be enhanced with additional debug information.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="inListPadding" type="boolean" minOccurs="0" maxOccurs="1" default="false">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[[#5600] Whether IN lists in IN predicates should be padded to powers of 2.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="delimiter" type="string" minOccurs="0" maxOccurs="1" default=";">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[[#5826] The delimiter character to be used to delimit statements in batches.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="executeUpdateWithoutWhere" type="jooq-runtime:ExecuteWithoutWhere" minOccurs="0" maxOccurs="1" default="LOG_DEBUG">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[[#6771] Specifies whether UPDATE statements are allowed to be executed lacking a WHERE clause. This has no effect on rendering the statements SQL string.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="executeDeleteWithoutWhere" type="jooq-runtime:ExecuteWithoutWhere" minOccurs="0" maxOccurs="1" default="LOG_DEBUG">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[[#6771] Specifies whether DELETE statements are allowed to be executed lacking a WHERE clause. This has no effect on rendering the statements SQL string.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>
    </all>
  </complexType>

  <complexType name="RenderMapping">
    <annotation><appinfo><jxb:class><jxb:javadoc><![CDATA[The runtime schema and table mapping.]]></jxb:javadoc></jxb:class></appinfo></annotation>

    <all>
      <element name="defaultSchema" type="string" minOccurs="0" maxOccurs="1">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[The default schema as defined in {@link org.jooq.Schema#getName()}.
<p>
This schema will be omitted in rendered SQL.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="schemata" type="jooq-runtime:MappedSchemata" minOccurs="0" maxOccurs="1">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[The mapped schemata configuration.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>
    </all>
  </complexType>

  <complexType name="MappedSchemata">
    <sequence>
      <element name="schema" type="jooq-runtime:MappedSchema" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>

  <complexType name="MappedSchema">
    <annotation><appinfo><jxb:class><jxb:javadoc><![CDATA[A schema mapping configuration.]]></jxb:javadoc></jxb:class></appinfo></annotation>

    <all>
      <element name="input" type="string" minOccurs="0" maxOccurs="1">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[The input schema name as defined in {@link org.jooq.Schema#getName()}
<p>
Either &lt;input/> or &lt;inputExpression/> must be provided]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="inputExpression" type="string" minOccurs="0" maxOccurs="1">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[A regular expression matching the input schema name as defined in {@link org.jooq.Schema#getName()}
Either &lt;input/> or &lt;inputExpression/> must be provided]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="output" type="string" minOccurs="0" maxOccurs="1">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[The output schema as it will be rendered in SQL.
<ul>
<li>When this is omitted, you can still apply table mapping.</li>
<li>When &lt;input/> is provided, &lt;output/> is a constant value.</li>
<li>When &lt;inputExpression/> is provided, &lt;output/> is a replacement expression</li>
</ul>]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="tables" type="jooq-runtime:MappedTables" minOccurs="0" maxOccurs="1">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[Configure table mapping for runtime table rewriting in generated SQL.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>
    </all>
  </complexType>

  <complexType name="MappedTables">
    <sequence>
      <element name="table" type="jooq-runtime:MappedTable" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>

  <complexType name="MappedTable">
    <annotation><appinfo><jxb:class><jxb:javadoc><![CDATA[A table mapping configuration.]]></jxb:javadoc></jxb:class></appinfo></annotation>

    <all>

      <element name="input" type="string" minOccurs="0" maxOccurs="1">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[The input table as defined in {@link org.jooq.Table#getName()}
Either &lt;input/> or &lt;inputExpression/> must be provided.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="inputExpression" type="string" minOccurs="0" maxOccurs="1">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[A regular expression matching the input table name as defined in {@link org.jooq.Table#getName()}
Either &lt;input/> or &lt;inputExpression/> must be provided]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="output" type="string" minOccurs="1" maxOccurs="1">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[The output table as it will be rendered in SQL.
<ul>
<li>When &lt;input/> is provided, &lt;output/> is a constant value.</li>
<li>When &lt;inputExpression/> is provided, &lt;output/> is a replacement expression.</li>
</ul>]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>
    </all>
  </complexType>

  <simpleType name="ParamType">
    <restriction base="string">

      <!-- Execute statements with indexed parameters, the way JDBC expects them -->
      <enumeration value="INDEXED"/>

      <!-- Execute statements with named parameters -->
      <enumeration value="NAMED"/>

      <!-- Execute statements with named parameters, if a name is given, or inlined parameters otherwise -->
      <enumeration value="NAMED_OR_INLINED"/>

      <!-- Execute statements with inlined parameters -->
      <enumeration value="INLINED"/>
    </restriction>
  </simpleType>

  <simpleType name="ParamCastMode">
    <restriction base="string">

      <!-- Bind values are always cast to their respective type. -->
      <enumeration value="ALWAYS"/>

      <!-- Bind values are cast to their respective type when needed.

           Some databases are not able to delay bind value type inference until the execution of a statement.
           They will either reject the value of unknown type, or assume a possibly inappropriate type. In these
           cases, jOOQ will generate an explicit cast(? as datatype) expression around the bind value to help
           the query parser do its job. The exact behaviour of this mode is undefined and subject to change. -->
      <enumeration value="DEFAULT"/>

      <!-- Bind values are never cast to their respective type. -->
      <enumeration value="NEVER"/>
    </restriction>
  </simpleType>

  <simpleType name="StatementType">
    <restriction base="string">

      <!-- Execute statements with inlined bind values, avoiding JDBC's
           PreparedStatements -->
      <enumeration value="STATIC_STATEMENT"/>

      <!-- Execute statements with bind values, using JDBC's
           PreparedStatements -->
      <enumeration value="PREPARED_STATEMENT"/>
    </restriction>
  </simpleType>

  <simpleType name="RenderNameStyle">
    <restriction base="string">

      <!-- Render object names quoted, as defined in the database. Use this
           to stay on the safe side with case-sensitivity and special
           characters. For instance:
           Oracle    : "SYS"."ALL_TAB_COLS"
           MySQL     : `information_schema`.`TABLES`
           SQL Server: [INFORMATION_SCHEMA].[TABLES] -->
      <enumeration value="QUOTED"/>

      <!-- Render object names, as defined in the database. For instance:
           Oracle    : SYS.ALL_TAB_COLS
           MySQL     : information_schema.TABLES
           SQL Server: INFORMATION_SCHEMA.TABLES -->
      <enumeration value="AS_IS"/>

      <!-- Force rendering object names in lower case. For instance:
           Oracle    : sys.all_tab_cols
           MySQL     : information_schema.tables
           SQL Server: information_schema.tables -->
      <enumeration value="LOWER"/>

      <!-- Force rendering object names in upper case. For instance:
           Oracle    : SYS.ALL_TAB_COLS
           MySQL     : INFORMATION_SCHEMA.TABLES
           SQL Server: INFORMATION_SCHEMA.TABLES -->
      <enumeration value="UPPER"/>
    </restriction>
  </simpleType>

  <simpleType name="RenderKeywordStyle">
    <restriction base="string">

      <!-- Keywords are rendered "as is", i.e. mostly in lower case. For instance:
           select .. from .. where .. -->
      <enumeration value="AS_IS"/>

      <!-- Keywords are rendered in lower case. For instance:
           select .. from .. where .. -->
      <enumeration value="LOWER"/>

      <!-- Keywords are rendered in upper case. For instance:
           SELECT .. FROM .. WHERE .. -->
      <enumeration value="UPPER"/>
    </restriction>
  </simpleType>

  <complexType name="RenderFormatting">
    <annotation><appinfo><jxb:class><jxb:javadoc><![CDATA[All sorts of formatting flags / settings.]]></jxb:javadoc></jxb:class></appinfo></annotation>

    <all>
      <element name="newline" type="string" minOccurs="0" maxOccurs="1" default="&#10;">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[The character to be used for line breaks.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="indentation" type="string" minOccurs="0" maxOccurs="1" default="  ">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[The characters to be used for indentation.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>

      <element name="printMargin" type="int" minOccurs="0" maxOccurs="1" default="80">
        <annotation><appinfo><jxb:property><jxb:javadoc><![CDATA[The print margin after which (some) formatted elements will break lines.]]></jxb:javadoc></jxb:property></appinfo></annotation>
      </element>
    </all>
  </complexType>

  <simpleType name="BackslashEscaping">
    <restriction base="string">

      <!-- Use the JDBC connection's setting for backslash escaping. In most databases, this
           is the same as OFF. In MySQL and MariaDB, the actual setting is extracted.

           This is not yet implemented, as the JDBC connection might not be available to the renderer
      <enumeration value="AUTO"/>
        -->

      <!-- Use the database's most sensible default value for ON (MySQL, MariaDB) / OFF (all other databases) -->
      <enumeration value="DEFAULT"/>

      <!-- Always escape backslashes. -->
      <enumeration value="ON"/>

      <!-- Never escape backslashes. -->
      <enumeration value="OFF"/>
    </restriction>
  </simpleType>

  <simpleType name="ThrowExceptions">
    <restriction base="string">

      <!-- Collect all exceptions from a batch and throw them all together -->
      <enumeration value="THROW_ALL"/>

      <!-- Throw only the first exception from a batch -->
      <enumeration value="THROW_FIRST"/>

      <!-- Throw no exceptions, but collect them in ResultOrRows -->
      <enumeration value="THROW_NONE"/>
    </restriction>
  </simpleType>

  <simpleType name="ExecuteWithoutWhere">
    <restriction base="string">

      <!-- UPDATE and DELETE statements are allowed to lack a WHERE clause -->
      <enumeration value="IGNORE"/>

      <!-- UPDATE and DELETE statements are allowed to lack a WHERE clause, but this is logged as DEBUG level -->
      <enumeration value="LOG_DEBUG"/>

      <!-- UPDATE and DELETE statements are allowed to lack a WHERE clause, but this is logged as INFO level -->
      <enumeration value="LOG_INFO"/>

      <!-- UPDATE and DELETE statements are allowed to lack a WHERE clause, but this is logged as WARN level -->
      <enumeration value="LOG_WARN"/>

      <!-- UPDATE and DELETE statements are not allowed to lack a WHERE clause -->
      <enumeration value="THROW"/>
    </restriction>
  </simpleType>
</schema>